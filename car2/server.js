const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const path = require("path");
require("dotenv").config();
console.log("üîë LINE Access Token:", process.env.LINE_ACCESS_TOKEN ? "Loaded" : "Not Found!");

// ‡πÄ‡∏û‡∏¥‡πà‡∏°
const mysql = require("mysql2/promise");

const db = mysql.createPool({
    host: process.env.MYSQLHOST,
    user: process.env.MYSQLUSER,
    password: process.env.MYSQLPASSWORD,
    database: process.env.MYSQLDATABASE,
    port: process.env.MYSQLPORT || 3306,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

db.getConnection()
    .then(() => console.log("‚úÖ Connected to Railway MySQL"))
    .catch((err) => console.error("‚ùå MySQL Connection Failed:", err));
// ‡∏´‡∏°‡∏î


const app = express();
// const PORT = process.env.PORT || 3000;
const PORT = process.env.PORT || 8080; // ‚úÖ Use Railway-assigned PORT


app.use(bodyParser.json());
app.use(express.static("views"));

app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "views"));

// üìå Vehicle License Plates
const cars = {
    "‡∏ô‡∏á 3": { plateNumber: "‡∏ô‡∏á 3", year: 2022 },
    "9‡∏Å‡∏©1153": { plateNumber: "9‡∏Å‡∏©1153", year: 2021 },
    "5‡∏Å‡∏Å7884": { plateNumber: "5‡∏Å‡∏Å7884", year: 2023 }
};



// üìå Vehicle Inspection Checklists
const checklists = {
    "‡∏ô‡∏á 3": [
        {
            category: "1.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", details: [
                { id: "lan", name: "‡∏ä‡∏∏‡∏î LAN ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (1) (Adapter 8)", expected: 1 },
                { id: "tv-tel", name: "‡∏ä‡∏∏‡∏î TV-TEL (Splitter)", expected: 1 },
                { id: "adt", name: "‡∏ä‡∏∏‡∏î Adapter ‡πÄ‡∏ä‡πá‡∏Ñ TV-TEL (‡∏™‡∏≥‡∏£‡∏≠‡∏á)", expected: 1 },
                { id: "rpc", name: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏£‡∏±‡∏ö (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 1 ‡∏™‡∏≤‡∏¢ 1)", expected: 1 },
                { id: "3p", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î 3 ‡πÄ‡∏ü‡∏™ (1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", expected: 1 },
                { id: "hvd", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü (1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", expected: 1 },
                { id: "pdmt", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏ß (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "scdv", name: "‡∏ä‡∏∏‡∏î‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏á (‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 1 ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 1)", expected: 1 },
                { id: "anm", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏•‡∏° (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "wwck", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "glo", name: "‡∏ñ‡∏∏‡∏á‡∏°‡∏∑‡∏≠ (1 ‡∏Ñ‡∏π‡πà)", expected: 1 },
                { id: "scb", name: "‡∏™‡∏≤‡∏¢‡∏ä‡πá‡∏≠‡∏ï (1 ‡∏™‡∏≤‡∏¢)", expected: 1 },
                { id: "and", name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ" }// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            ]
        },
        {
            category: "2.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•", details: [
                { id: "tank", name: "‡∏ñ‡∏±‡∏á", expected: 3 },
                { id: "cloth", name: "‡∏ú‡πâ‡∏≤", expected: 9 },
                { id: "psc", name: "‡∏î‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", expected: 1 },
                { id: "rbt", name: "‡∏™‡∏≤‡∏¢‡∏¢‡∏≤‡∏á", expected: 5 },
                { id: "bgs", name: "‡πÄ‡∏Å‡∏ï‡∏∏", expected: 1 },
                { id: "bread", name: "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á", expected: 1 }
            ]
        },
        {
            category: "3.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤", details: [
                { id: "gst", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÉ‡∏´‡∏ç‡πà", expected: 1 },
                { id: "sst", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "fld", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏•‡∏¥‡∏á", expected: 1 },
                { id: "tch", name: "‡πÑ‡∏ü‡∏â‡∏≤‡∏¢", expected: 1 }
            ]
        },
        {
            category: "4.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", details: [
                { id: "ifc", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏ü‡∏≤‡πÄ‡∏£‡∏î", expected: 2 },
                { id: "mtmt", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", expected: 2 },
                { id: "tms", name: "‡∏ï‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ï‡∏£", expected: 1 },
                { id: "msrdv", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏ù‡πâ‡∏≤", expected: 1 },
                { id: "mnmwt", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "tip", name: "‡∏ï‡∏±‡∏ß‡∏ó‡∏¥‡∏õ", expected: 1 },
                { id: "bct", name: "‡∏õ‡∏µ‡πä‡∏õ", expected: 1 },
                { id: "dmr", name: "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏™‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π", expected: 1 },
                { id: "astc", name: "‡∏ù‡∏≠‡∏¢‡∏î‡∏π‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", expected: 1 }
            ]
        },
        {
            category: "5.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠‡∏¢", details: [
                { id: "tape", name: "‡πÄ‡∏ó‡∏õ", expected: 1 },
                { id: "asts", name: "‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", expected: 1 },
                { id: "btr", name: "‡∏ñ‡πà‡∏≤‡∏ô", expected: 1 },
                { id: "plug", name: "‡∏õ‡∏•‡∏±‡πä‡∏Å", expected: 2 },
                { id: "clc", name: "‡∏ú‡πâ‡∏≤ + ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå", expected: 1 }
            ]
        },
        {
            category: "6.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ", details: [
                { id: "kns", name: "‡πÑ‡∏°‡πâ‡πÄ‡∏Ñ‡∏≤‡∏∞", expected: 5 },
                { id: "lle", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏¢‡∏≤‡∏ß", expected: 1 },
                { id: "shl", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏±‡πâ‡∏ô", expected: 1 },
                { id: "brcb", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡πÉ‡∏´‡∏ç‡πà" },// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "brcs", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "brccd", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î" },// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "tbct", name: "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏ó‡πà‡∏≠", expected: 1 },
                { id: "chair", name: "‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ", expected: 2 },
                { id: "pipe", name: "‡∏ó‡πà‡∏≠", expected: 1 },
                { id: "grille", name: "‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á", expected: 1 },
                { id: "hmer", name: "‡∏Ñ‡πâ‡∏≠‡∏ô", expected: 2 },
                { id: "raincoat", name: "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏ù‡∏ô", expected: 1 },
                { id: "hpsw", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏µ‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á" },// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "rope", name: "‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å", expected: 1 },
                { id: "wktk", name: "‡∏ß‡∏≠", expected: 2 },
                { id: "stc", name: "‡∏™‡∏µ‡πÄ‡∏ó‡∏™‡∏£‡∏∞‡∏ö‡∏ö", expected: 1 },
                { id: "pliers", name: "‡∏Ñ‡∏µ‡∏°", expected: 1 }
            ]
        }
    ],
    "9‡∏Å‡∏©1153": [ // ‚úÖ Fixed incorrect plate number
        {
            category: "1.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", details: [
                { id: "lan", name: "‡∏ä‡∏∏‡∏î LAN ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (1) (Adapter 8)", expected: 1 },
                { id: "tv-tel", name: "‡∏ä‡∏∏‡∏î TV-TEL (Splitter)" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "adt", name: "‡∏ä‡∏∏‡∏î Adapter ‡πÄ‡∏ä‡πá‡∏Ñ TV-TEL (‡∏™‡∏≥‡∏£‡∏≠‡∏á)", expected: 1 },
                { id: "rpc", name: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏£‡∏±‡∏ö (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 1 ‡∏™‡∏≤‡∏¢ 1)", expected: 1 },
                { id: "3p", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î 3 ‡πÄ‡∏ü‡∏™ (1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", expected: 1 },
                { id: "hvd", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü (1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", expected: 1 },
                { id: "pdmt", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏ß (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "scdv", name: "‡∏ä‡∏∏‡∏î‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏á (‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 1 ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 1)", expected: 2 },
                { id: "anm", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏•‡∏° (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "wwck", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô (1 ‡∏ä‡∏∏‡∏î)" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "glo", name: "‡∏ñ‡∏∏‡∏á‡∏°‡∏∑‡∏≠ (1 ‡∏Ñ‡∏π‡πà)", expected: 1 },
                { id: "scb", name: "‡∏™‡∏≤‡∏¢‡∏ä‡πá‡∏≠‡∏ï (1 ‡∏™‡∏≤‡∏¢)", expected: 1 },
                { id: "and", name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ" } // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            ]
        },
        {
            category: "2.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•", details: [
                { id: "tank", name: "‡∏ñ‡∏±‡∏á", expected: 5 },
                { id: "cloth", name: "‡∏ú‡πâ‡∏≤", expected: 10 },
                { id: "psc", name: "‡∏î‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", expected: 1 },
                { id: "rbt", name: "‡∏™‡∏≤‡∏¢‡∏¢‡∏≤‡∏á", expected: 2 },
                { id: "bgs", name: "‡πÄ‡∏Å‡∏ï‡∏∏", expected: 1 },
                { id: "bread", name: "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á", expected: 1 }
            ]
        },
        {
            category: "3.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤", details: [
                { id: "gst", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÉ‡∏´‡∏ç‡πà", expected: 1 },
                { id: "sst", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "fld", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏•‡∏¥‡∏á", expected: 1 },
                { id: "tch", name: "‡πÑ‡∏ü‡∏â‡∏≤‡∏¢", expected: 1 }
            ]
        },
        {
            category: "4.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", details: [
                { id: "ifc", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏ü‡∏≤‡πÄ‡∏£‡∏î", expected: 2 },
                { id: "mtmt", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", expected: 1 },
                { id: "tms", name: "‡∏ï‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ï‡∏£", expected: 1 },
                { id: "msrdv", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏ù‡πâ‡∏≤", expected: 1 },
                { id: "mnmwt", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "tip", name: "‡∏ï‡∏±‡∏ß‡∏ó‡∏¥‡∏õ", expected: 2 },
                { id: "bct", name: "‡∏õ‡∏µ‡πä‡∏õ", expected: 1 },
                { id: "dmr", name: "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏™‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "astc", name: "‡∏ù‡∏≠‡∏¢‡∏î‡∏π‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", expected: 1 }
            ]
        },
        {
            category: "5. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠‡∏¢", details: [
                { id: "tape", name: "‡πÄ‡∏ó‡∏õ", expected: 1 },
                { id: "asts", name: "‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", expected: 1 },
                { id: "btr", name: "‡∏ñ‡πà‡∏≤‡∏ô", expected: 1 },
                { id: "plug", name: "‡∏õ‡∏•‡∏±‡πä‡∏Å", expected: 2 },
                { id: "clc", name: "‡∏ú‡πâ‡∏≤ + ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå", expected: 1 }
            ]
        },
        {
            category: "6.‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ", details: [
                { id: "kns", name: "‡πÑ‡∏°‡πâ‡πÄ‡∏Ñ‡∏≤‡∏∞", expected: 4 },
                { id: "lle", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏¢‡∏≤‡∏ß", expected: 1 },
                { id: "shl", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏±‡πâ‡∏ô", expected: 1 },
                { id: "brcb", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡πÉ‡∏´‡∏ç‡πà" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "brcs", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "brccd", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "tbct", name: "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏ó‡πà‡∏≠", expected: 1 },
                { id: "chair", name: "‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ", expected: 1 },
                { id: "pipe", name: "‡∏ó‡πà‡∏≠", expected: 1 },
                { id: "grille", name: "‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á", expected: 1 },
                { id: "hmer", name: "‡∏Ñ‡πâ‡∏≠‡∏ô", expected: 3 },
                { id: "raincoat", name: "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏ù‡∏ô", expected: 1 },
                { id: "hpsw", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏µ‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "rope", name: "‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å", expected: 1 },
                { id: "wktk", name: "‡∏ß‡∏≠", expected: 2 },
                { id: "stc", name: "‡∏™‡∏µ‡πÄ‡∏ó‡∏™‡∏£‡∏∞‡∏ö‡∏ö", expected: 1 },
                { id: "pliers", name: "‡∏Ñ‡∏µ‡∏°", expected: 1 }
            ]
        }
    ],
    "5‡∏Å‡∏Å7884": [
        {
            category: "1. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", details: [
                { id: "lan", name: "‡∏ä‡∏∏‡∏î LAN ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (1) (Adapter 8)", expected: 1 },
                { id: "tv-tel", name: "‡∏ä‡∏∏‡∏î TV-TEL (Splitter)", expected: 1 },
                { id: "adt", name: "‡∏ä‡∏∏‡∏î Adapter ‡πÄ‡∏ä‡πá‡∏Ñ TV-TEL (‡∏™‡∏≥‡∏£‡∏≠‡∏á)", expected: 1 },
                { id: "rpc", name: "‡∏ä‡∏∏‡∏î‡πÄ‡∏ï‡πâ‡∏≤‡∏£‡∏±‡∏ö (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 1 ‡∏™‡∏≤‡∏¢ 1)", expected: 1 },
                { id: "3p", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î 3 ‡πÄ‡∏ü‡∏™ (1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", expected: 1 },
                { id: "hvd", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡πÑ‡∏ü (1 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)", expected: 1 },
                { id: "pdmt", name: "‡∏ä‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏ß (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "scdv", name: "‡∏ä‡∏∏‡∏î‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏á (‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ 1 ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ 1)", expected: 1 },
                { id: "anm", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏•‡∏° (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "wwck", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ô‡πâ‡∏≥‡∏≠‡∏∏‡πà‡∏ô (1 ‡∏ä‡∏∏‡∏î)", expected: 1 },
                { id: "glo", name: "‡∏ñ‡∏∏‡∏á‡∏°‡∏∑‡∏≠ (1 ‡∏Ñ‡∏π‡πà)", expected: 1 },
                { id: "scb", name: "‡∏™‡∏≤‡∏¢‡∏ä‡πá‡∏≠‡∏ï (1 ‡∏™‡∏≤‡∏¢)", expected: 1 },
                { id: "and", name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ" } // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            ]
        },
        {
            category: "2. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏∏‡∏Ç‡∏≤‡∏†‡∏¥‡∏ö‡∏≤‡∏•", details: [
                { id: "tank", name: "‡∏ñ‡∏±‡∏á", expected: 5 },
                { id: "cloth", name: "‡∏ú‡πâ‡∏≤‡πÄ‡∏ä‡πá‡∏î‡πÄ‡∏ó‡πâ‡∏≤", expected: 13 },
                { id: "psc", name: "‡∏î‡∏¥‡∏ô‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô", expected: 1 },
                { id: "rbt", name: "‡∏™‡∏≤‡∏¢‡∏¢‡∏≤‡∏á", expected: 3 },
                { id: "bgs", name: "‡πÄ‡∏Å‡∏ï‡∏∏", expected: 1 },
                { id: "bread", name: "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á", expected: 1 }
            ]
        },
        {
            category: "3. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤", details: [
                { id: "gst", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÉ‡∏´‡∏ç‡πà", expected: 1 },
                { id: "sst", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "fld", name: "‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏•‡∏¥‡∏á", expected: 1 },
                { id: "tch", name: "‡πÑ‡∏ü‡∏â‡∏≤‡∏¢", expected: 1 }
            ]
        },
        {
            category: "4. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", details: [
                { id: "ifc", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏¥‡∏ô‡∏ü‡∏≤‡πÄ‡∏£‡∏î", expected: 2 },
                { id: "mtmt", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô", expected: 1 },
                { id: "tms", name: "‡∏ï‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ï‡∏£", expected: 1 },
                { id: "msrdv", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏ù‡πâ‡∏≤", expected: 1 },
                { id: "mnmwt", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "tip", name: "‡∏ï‡∏±‡∏ß‡∏ó‡∏¥‡∏õ", expected: 1 },
                { id: "bct", name: "‡∏õ‡∏µ‡πä‡∏õ", expected: 1 },
                { id: "dmr", name: "‡∏Å‡∏£‡∏∞‡∏à‡∏Å‡∏™‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π", expected: 1 },
                { id: "astc", name: "‡∏ù‡∏≠‡∏¢‡∏î‡∏π‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", expected: 1 }
            ]
        },
        {
            category: "5. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠‡∏¢", details: [
                { id: "tape", name: "‡πÄ‡∏ó‡∏õ", expected: 1 },
                { id: "asts", name: "‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", expected: 1 },
                { id: "btr", name: "‡∏ñ‡πà‡∏≤‡∏ô", expected: 1 },
                { id: "plug", name: "‡∏õ‡∏•‡∏±‡πä‡∏Å", expected: 2 },
                { id: "clc", name: "‡∏ú‡πâ‡∏≤ + ‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå", expected: 1 }
            ]
        },
        {
            category: "6. ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ", details: [
                { id: "kns", name: "‡πÑ‡∏°‡πâ‡πÄ‡∏Ñ‡∏≤‡∏∞", expected: 5 },
                { id: "lle", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏¢‡∏≤‡∏ß", expected: 1 },
                { id: "shl", name: "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏±‡πâ‡∏ô", expected: 1 },
                { id: "brcb", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡πÉ‡∏´‡∏ç‡πà" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "brcs", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡πÄ‡∏•‡πá‡∏Å", expected: 1 },
                { id: "brccd", name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏á‡∏π‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "tbct", name: "‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏ó‡πà‡∏≠", expected: 1 },
                { id: "chair", name: "‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ", expected: 2 },
                { id: "pipe", name: "‡∏ó‡πà‡∏≠", expected: 1 },
                { id: "grille", name: "‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á", expected: 1 },
                { id: "hmer", name: "‡∏Ñ‡πâ‡∏≠‡∏ô", expected: 1 },
                { id: "raincoat", name: "‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏ù‡∏ô", expected: 1 },
                { id: "hpsw", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏µ‡∏î‡∏ô‡πâ‡∏≥‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á" }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                { id: "rope", name: "‡πÄ‡∏ä‡∏∑‡∏≠‡∏Å", expected: 1 },
                { id: "wktk", name: "‡∏ß‡∏≠", expected: 2 },
                { id: "stc", name: "‡∏™‡∏µ‡πÄ‡∏ó‡∏™‡∏£‡∏∞‡∏ö‡∏ö", expected: 1 },
                { id: "pliers", name: "‡∏Ñ‡∏µ‡∏°", expected: 1 }
            ]
        }
    ]
};

// ‚úÖ Render Home Page
app.get("/", (req, res) => {
    res.render("index", { cars });
});

// ‡πÄ‡∏û‡∏¥‡∏°
app.get("/history", (req, res) => {
    res.render("history", { checklists }); // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .ejs
});
// ‡∏´‡∏°‡∏î

// ‚úÖ Fetch Checklist Based on License Plate
app.get("/get-checklist-form/:plateNumber", (req, res) => {
    const checklist = checklists[req.params.plateNumber];
    if (!checklist) {
        return res.status(404).json({ error: "Checklist not found" });
    }
    res.json({ plateNumber: req.params.plateNumber, checklist });
});

// ‡πÄ‡∏û‡∏¥‡∏°
app.get("/checklist-history/:userId", async (req, res) => {
    const { userId } = req.params;

    try {
        const [rows] = await db.query(
            `SELECT * FROM vehicle_checklists WHERE user_id = ? AND submitted_at >= NOW() - INTERVAL 7 DAY ORDER BY submitted_at DESC`,
            [userId]
        );
        res.json(rows);
    } catch (error) {
        console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
        res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
    }
});
//  ‡∏´‡∏°‡∏î





// ‚úÖ LINE Webhook Route
app.post("/webhook", (req, res) => {
    console.log("üì© Received Webhook:", JSON.stringify(req.body, null, 2));

    // Acknowledge receipt of webhook
    res.sendStatus(200);

    // Process the event (e.g., responding to messages)
    const events = req.body.events;
    events.forEach(async (event) => {
        if (event.type === "message" && event.message.type === "text") {
            const userMessage = event.message.text;
            const replyToken = event.replyToken;

            // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"
            if (userMessage === "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á") {
                const userId = event.source.userId;

                try {
                    const [rows] = await db.query(
                        `SELECT plate_number, inspector, submitted_at FROM vehicle_checklists 
                            WHERE user_id = ? AND submitted_at >= NOW() - INTERVAL 7 DAY
                            ORDER BY submitted_at DESC LIMIT 10`, [userId]
                    );

                    let responseText;
                    if (rows.length === 0) {
                        responseText = "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤";
                    } else {
                        responseText = "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 7 ‡∏ß‡∏±‡∏ô:\n";
                        rows.forEach(row => {
                            const date = new Date(row.submitted_at).toLocaleString("th-TH", {
                                dateStyle: "short",
                                timeStyle: "short",
                                timeZone: "Asia/Bangkok"
                            });
                            responseText += `\nüìÖ ${date}\nüë∑‚Äç‚ôÇÔ∏è ${row.inspector}\nüöó ${row.plate_number}\n`;
                        });
                    }

                    await axios.post("https://api.line.me/v2/bot/message/reply", {
                        replyToken,
                        messages: [{ type: "text", text: responseText }]
                    }, {
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": `Bearer ${process.env.LINE_ACCESS_TOKEN}`
                        }
                    });

                } catch (err) {
                    console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
                    await axios.post("https://api.line.me/v2/bot/message/reply", {
                        replyToken,
                        messages: [{ type: "text", text: "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ" }]
                    }, {
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": `Bearer ${process.env.LINE_ACCESS_TOKEN}`
                        }
                    });
                }

                return; // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ï‡∏≠‡∏ö default
            }

            
            // ‚úÖ ‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà admin ‡∏ï‡∏±‡πâ‡∏á auto-response ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô LINE OA
            const reservedKeywords = ["1", "2", "‡πÄ‡∏°‡∏ô‡∏π", "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"];
            if (reservedKeywords.includes(userMessage.trim())) {
                console.log("‚è© ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô LINE OA:", userMessage);
                return; // ‚ùó ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ bot ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ã‡πâ‡∏≥
            }
            
            // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
            let responseText = "üöó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!";
            if (cars[userMessage]) {
                responseText = `üîé ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${userMessage}:\n\n`;
                const checklist = checklists[userMessage] || [];
                checklist.forEach(cat => {
                    responseText += ` ${cat.category}\n`;
                    cat.details.forEach(item => {
                        responseText += `- ${item.name} ${item.expected ? `(‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ${item.expected})` : ""}\n`;
                    });
                    responseText += "\n";
                });
            }
            

            await axios.post("https://api.line.me/v2/bot/message/reply", {
                replyToken,
                messages: [{ type: "text", text: responseText }]
            }, {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${process.env.LINE_ACCESS_TOKEN}`
                }
            });
        }
    });

});

// ‚úÖ Submit Checklist & Notify LINE
app.post("/submit-checklist", async (req, res) => {
    try {
        console.log("üì© Received Data from Frontend:", req.body);

        const { userId, inspector, plateNumber, equipment } = req.body;
        if (!userId || !inspector || !plateNumber || !equipment) {
            return res.status(400).json({ error: "Incomplete data received!" });
        }

        // ‡πÄ‡∏û‡∏¥‡∏°
        try {
            await db.query(
                `INSERT INTO vehicle_checklists (user_id, inspector, plate_number, equipment) VALUES (?, ?, ?, ?)`,
                [userId, inspector, plateNumber, JSON.stringify(equipment)] // ‚Üê ‡∏ï‡πâ‡∏≠‡∏á JSON.stringify!
            );

            // res.status(200).json({ message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });

        } catch (error) {
            console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", error);
            res.status(500).json({ error: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        }

        // ‡∏´‡∏°‡∏î

        console.log("üì§ Sending Message to LINE User:", userId);

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE Access Token ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if (!process.env.LINE_ACCESS_TOKEN) {
            console.error("‚ùå Missing LINE Access Token!");
            return res.status(500).json({ error: "Missing LINE Access Token!" });
        }

        console.log("üîë Using LINE Access Token (First 10 chars):", process.env.LINE_ACCESS_TOKEN.substring(0, 10) + "...");


        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const now = new Date();
        const thaiDateTime = new Intl.DateTimeFormat('th-TH', {
            year: 'numeric', month: 'long', day: 'numeric',
            hour: '2-digit', minute: '2-digit', second: '2-digit',
            timeZone: 'Asia/Bangkok'
        }).format(now);

        let message = `üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢: ${inspector}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${thaiDateTime}\nüöó ‡∏õ‡πâ‡∏≤‡∏¢‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: ${plateNumber}\n\n`;
        let categories = {};
        let errorMessages = [];

        equipment.forEach(item => {
            let category = checklists[plateNumber]?.find(c => c.details.some(d => d.id === item.name));
            if (category) {
                if (!categories[category.category]) categories[category.category] = [];
                let equipData = category.details.find(d => d.id === item.name);
                let qty = item.quantity || 0;
                let expectedQty = equipData.expected || 0;
                let remark = item.remark ? ` ${item.remark}` : "";

                if (expectedQty > 0 && qty > expectedQty) {
                    errorMessages.push(`${equipData.name} ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${expectedQty}`);
                }

                let statusText = qty > 0 ? `‡∏°‡∏µ ${qty}` : "‡πÑ‡∏°‡πà‡∏°‡∏µ";
                if (expectedQty > 0) {
                    if (qty === expectedQty) statusText += " ‡∏Ñ‡∏£‡∏ö";
                    else if (qty < expectedQty) statusText += ` ‡∏Ç‡∏≤‡∏î ${expectedQty - qty}`;
                }

                categories[category.category].push(`- ${equipData.name}: ${statusText}${remark}`);
            }
        });

        if (errorMessages.length > 0) {
            return res.status(400).json({ error: errorMessages.join("\n") });
        }

        Object.entries(categories).forEach(([category, items]) => {
            message += ` ${category}\n${items.join("\n")}\n\n`;
        });

        console.log("üîë Using LINE Access Token:", process.env.LINE_ACCESS_TOKEN);

        const response = await axios.post("https://api.line.me/v2/bot/message/push", {
            to: userId, // ‚úÖ ‡πÉ‡∏ä‡πâ userId ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å LIFF
            messages: [{ type: "text", text: message }]
        }, {
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${process.env.LINE_ACCESS_TOKEN}`
            }
        });

        console.log("‚úÖ LINE Message Sent Successfully:", response.data);
        res.status(200).json({ success: true, message: "Checklist sent to LINE!" });

    } catch (error) {
        console.error("‚ùå Failed to Send:", error.response?.data || error.message);
        res.status(500).json({ error: "Failed to send checklist", details: error.response?.data });
    }
});


// ‚úÖ Start Server
// app.listen(PORT, () => {
//     console.log(`üöÄ Server running on http://localhost:${PORT}`);
// });
app.listen(PORT, "0.0.0.0", () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});